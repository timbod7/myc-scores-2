/// Adl definitions helpful proving api access to db values
module common.db_api {

import common.http.HttpReq;

type TabularQuery<T> = HttpReq<TabularQueryReq<T>, Paginated<T>>;
  
struct TabularQueryReq<T> {
//    FilterPredicate<T> filter = "true";
  QuerySorting<T> sorting = [];
  PageReq page = {}; 
};

type QuerySorting<T> = Vector<SortColumn<T>>;

struct SortColumn<T> {
  ColumnRef<T> column;
  SortOrder order;
};

union SortOrder {
  Void asc;
  Void desc;
};

// The name of a column in table T
newtype ColumnRef<T> = String;

// The name of a column in table T with a serialized json value of that columns type 
struct ColumnRefWithValue<T> {
  ColumnRef<T> column;
  Json value;
};

// A request for a page of results
struct PageReq {
  // Pagination offset
  Word64 offset = 0;

  // Max number of items to return
  Word64 limit = 20;
};

/// A holder for a page of results
struct Paginated<T> {

  /// The paginated items
  Vector<T> items;

  /// The offset used for this query
  Word64 current_offset;

  /// The size of the entire date set
  Word64 total_count;
};

};
