module mycscores.apis.ui {

import common.http.Unit;
import common.http.HttpReq;
import common.time.Instant;
import common.time.LocalDate;
import common.time.LocalTime;
import common.strings.EmailAddress;
import common.strings.Password;
import common.strings.StringNE;
import common.strings.StringML;
import common.db_api.CrudApi;
import common.db_api.TabularQuery;
import common.db_api.TabularQueryReq;
import common.db_api.Paginated;
import common.db_api.WithId;

import mycscores.db.AppUserId;
import mycscores.db.CalendarEntry;
import mycscores.db.Entrant;
import mycscores.db.EntrantId;
import mycscores.db.Event;
import mycscores.db.EventId;
import mycscores.db.EventResult;
import mycscores.db.RaceId;
import mycscores.db.RaceType;
import mycscores.db.RResult;
import mycscores.db.Season;
import mycscores.db.SeasonId;
import mycscores.db.Series;
import mycscores.db.SeriesId;

struct ApiRequests {

  /// AWS default compatible health check
  HttpReq<Void,Void> healthy = {
    "method": "get",
    "path": "/",
    "security" : "public"
  };

  /// Login a user
  ///
  /// The response will set an httpOnly cookie containing the refresh token
  HttpReq<LoginReq, LoginResp> login = {
    "path": "/login",
    "security" : "public"
  };

  /// Get a refreshed access token
  ///
  /// If the refresh token is not provided in the request body, then it will
  /// be read from the refrestToken cookie in the request.
  HttpReq<RefreshReq, RefreshResp> refresh = {
    "path": "/refresh",
    "security" : "public"
  };

  /// Clear the `refreshToken` cookie.
  HttpReq<Unit, Unit> logout = {
    "path": "/logout",
    "security" : "public"
  };

  /// Gets info about the logged in user
  // NOTE: Fails with 401 if the token is invalid or user does not exist
  HttpReq<Void,UserWithId> who_am_i = {
    "method": "get",
    "path": "/whoami",
    "security" : "token"
  };

  HttpReq<Void,Vector<SeasonDetails>> seasons = {
    "path": "/seasons",
    "security" : "public"
  };

  HttpReq<SeasonId, RaceScheduleResp> raceSchedule = {
    "path": "/race-schedule",
    "security" : "public"
  };

  /// Fetch the entrants for a race
  HttpReq<RaceId, Vector<RaceEntrant>> getRaceEntrants = {
    "path": "/raceentrants-get",
    "security" : "public"
  };

  /// Fetch the results for a race
  HttpReq<RaceId, GetRaceResultsResp> getRaceResults = {
    "path": "/results/race",
    "security" : "public"
  };

  /// Set/update the results for a race
  HttpReq<UpdateRaceResultsReq, Unit> updateRaceResults = {
    "path": "/results/race/update",
    "security" : "token"
  };

  /// Fetch results for an event
  HttpReq<EventId, GetEventResultsResp> getEventResults = {
    "path": "/results/event",
    "security" : "public"
  };

  /// Fetch results for all events in a season
  HttpReq<SeasonId, Vector<EventResults>> getSeasonEventResults = {
    "path": "/results/season-events",
    "security" : "public"
  };


  /// Fetch results for a series
  HttpReq<SeriesId, GetSeriesResultsResp> getSeriesResults = {
    "path": "/results/series",
    "security" : "public"
  };

  /// Create a new user
  HttpReq<UserDetails, AppUserId> create_user = {
    "path": "/crud/users/create",
    "security" : { "tokenWithRole": "admin" }
  };

  /// Update a user
  HttpReq<WithId<AppUserId,UserDetails>, Unit> update_user = {
    "path": "/crud/users/update",
    "security" : { "tokenWithRole": "admin" }
  };

  /// Delete a user
  HttpReq<AppUserId, Unit> delete_user = {
    "path": "/crud/users/delete",
    "security" : { "tokenWithRole": "admin" }
  };

  /// Query users
  HttpReq<UserQueryReq, Paginated<UserWithId>> query_users = {
    "method": "get",
    "path": "/crud/users/query",
    "security" : { "tokenWithRole": "admin" }
  };

  CrudApi<SeasonId, Season, SeasonSorting, SeasonFilter> crud_seasons = {
    "create": {
      "path": "/crud/seasons/create",
      "security" : { "tokenWithRole": "admin" }
    },
    "update": {
      "path": "/crud/seasons/update",
      "security" : { "tokenWithRole": "admin" }
    },
    "delete": {
      "path": "/crud/seasons/delete",
      "security" : { "tokenWithRole": "admin" }
    },
    "query": {
      "method": "get",
      "path": "/crud/seasons/query",
      "security" : { "tokenWithRole": "admin" }
    }
  };
};

struct LoginReq {
  StringNE email;
  Password password;
};

union LoginResp {
  LoginTokens tokens;
  Void invalid_credentials;
};

struct RefreshReq {
  Nullable<StringNE> refresh_token = null;
};

union RefreshResp {
  StringNE access_token;
  Void invalid_refresh_token;
};

struct LoginTokens {
  StringNE access_jwt;
  StringNE refresh_jwt;
};

struct SeasonDetails {
  WithId<SeasonId,Season> season;
  Vector<WithId<SeriesId,Series>> series;
};

struct RaceScheduleEntry {
  RaceId race_id;
  LocalDate date;
  Word8 race_number;
  Vector<WithId<EventId, Event>> events;
  String duty_officer;
};

struct RaceEntrant {
  WithId<EntrantId, Entrant> entrant;
  Double handicap;
  Double handicap_secs;
};

struct RaceScheduleResp {
  Season season;
  Vector<RaceScheduleEntry> races;
  Vector<CalendarEntry> calendar_entries;
};

struct EntrantRaceResult {
  EntrantId entrant_id;
  RResult<LocalTime> result;

};

struct RaceStartDetails {
  LocalDate date;
  LocalTime start_time;
  StringML conditions;
  StringML notes;
  Bool abandoned;
};

struct GetRaceResultsResp {
  LocalDate scheduled_date;
  Vector<WithId<EventId,Event>> events;
  Nullable<RaceStartDetails> start_details;
  Vector<EntrantRaceResult> results;
};

struct EventResults {
  LocalDate date;
  LocalTime start_time;
  StringNE abbreviation;
  StringML conditions;
  Bool is_handicap;
  Bool abandoned;
  RaceType race_type;
  Vector<EventResult> results;
};

type GetEventResultsResp = Nullable<EventResults>;

struct EntrantSeriesResult {
  EntrantId entrant_id;
  EventId event_id;
  Word16 score;
};

struct GetSeriesResultsResp {
  WithId<SeasonId, Season> season;
  WithId<SeriesId, Series> series;
  Vector<WithId<EventId, Event>> events;
  Vector<WithId<EntrantId, Entrant>> entrants;
  Vector<EntrantSeriesResult> results;
};

struct UpdateRaceResultsReq {
  RaceId race_id;
  RaceStartDetails start_details;
  Vector<EntrantRaceResult> results;
};


struct User {
  StringNE fullname;
  EmailAddress email;
  Bool is_admin;
};


type UserWithId = WithId<AppUserId, User>;

union UserSorting {
  Void fullname;
  Void email;
};

union UserFilter {
  String fullname_matches;
};

type UserQueryReq = TabularQueryReq<UserSorting,UserFilter>;

struct UserDetails {
  StringNE fullname;
  EmailAddress email;
  Bool is_admin;
  Password password;
};

union SeasonSorting {
  Void name;
};

union SeasonFilter {
  String name_matches;
};
};
