module mycscores.apis.ui {

import common.http.Unit;
import common.http.HttpReq;
import common.time.Instant;
import common.strings.EmailAddress;
import common.strings.Password;
import common.strings.StringNE;
import common.strings.StringML;

import mycscores.db.AppUserId;
import mycscores.db.MessageId;

struct ApiRequests {

  /// AWS default compatible health check
  HttpReq<Void,Void> healthy = {
    "method": "get",
    "path": "/",
    "security" : "public"
  };

  /// Login a user
  ///
  /// The response will set an httpOnly cookie containing the refresh token
  HttpReq<LoginReq, LoginResp> login = {
    "path": "/login",
    "security" : "public"
  };

  /// Get a refreshed access token
  ///
  /// If the refresh token is not provided in the request body, then it will
  /// be read from the refrestToken cookie in the request.
  HttpReq<RefreshReq, RefreshResp> refresh = {
    "path": "/refresh",
    "security" : "public"
  };

  /// Clear the `refreshToken` cookie.
  HttpReq<Unit, Unit> logout = {
    "path": "/logout",
    "security" : "public"
  };

  /// Post a message to the noticeboard
  HttpReq<NewMessageReq, MessageId> new_message = {
    "path": "/messages/new",
    "security" : "token"
  };

  /// Get recent noticeboard messages
  HttpReq<RecentMessagesReq, Paginated<Message> > recent_messages = {
    "method": "get",
    "path": "/messages/recent",
    "security" : "token"
  };

  /// Gets info about the logged in user
  // NOTE: Fails with 401 if the token is invalid or user does not exist
  HttpReq<Void,UserWithId> who_am_i = {
    "method": "get",
    "path": "/whoami",
    "security" : "token"
  };

  /// Create a new user
  HttpReq<UserDetails, AppUserId> create_user = {
    "path": "/users/create",
    "security" : { "tokenWithRole": "admin" }
  };

  /// Update a user
  HttpReq<WithId<AppUserId,UserDetails>, Unit> update_user = {
    "path": "/users/update",
    "security" : { "tokenWithRole": "admin" }
  };

  /// Query users
  HttpReq<QueryUsersReq, Paginated<UserWithId>> query_users = {
    "method": "get",
    "path": "/users/query",
    "security" : { "tokenWithRole": "admin" }
  };
};

struct LoginReq {
  StringNE email;
  Password password;
};

union LoginResp {
  LoginTokens tokens;
  Void invalid_credentials;
};

struct RefreshReq {
  Nullable<StringNE> refresh_token = null;
};

union RefreshResp {
  StringNE access_token;
  Void invalid_refresh_token;
};

struct LoginTokens {
  StringNE access_jwt;
  StringNE refresh_jwt;
};

struct NewMessageReq {
  StringML message;
};

struct RecentMessagesReq {
  PageReq page;
};

struct PageReq {
  // Pagination offset
  Word64 offset = 0;

  // Max number of items to return
  Word64 limit = 20;
};

/// A holder for paginated results
struct Paginated<T> {

  /// The paginated items
  Vector<T> items;

  /// The offset used for this query
  Word64 current_offset;

  /// The size of the entire date set
  Word64 total_count;
};

struct Message {
  MessageId id;
  Instant posted_at;
  String user_fullname;
  StringML message;
};

struct QueryUsersReq {
  PageReq page = {};
};

struct User {
  StringNE fullname;
  EmailAddress email;
  Bool is_admin;
};

type UserWithId = WithId<AppUserId, User>;

struct UserDetails {
  StringNE fullname;
  EmailAddress email;
  Bool is_admin;
  Password password;
};

struct WithId<I,T> {
 I id;
 T value;
};

};
