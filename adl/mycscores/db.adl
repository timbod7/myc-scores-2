module mycscores.db {

import common.time.Instant;
import common.time.LocalDate;
import common.time.LocalTime;
import common.db.DbTable;
import common.db.DbKey;
import common.db.WithId;
import common.strings.StringNE;
import common.strings.StringML;

struct AppUser {
  StringNE fullname;
  StringNE email;
  Bool is_admin;
  StringNE hashed_password = "";
};

newtype AppUserTable = WithId<AppUser>;
type AppUserId = DbKey<AppUserTable>;

annotation AppUserTable DbTable {
  "indexes" : [["email"]],
  "uniqueness_constraints": [["email"]],
  "id_prefix": "U-"
};

/// Each season is a collection of series
struct Season {
  StringNE name;
};

newtype SeasonTable = WithId<Season>;
type SeasonId = DbKey<SeasonTable>;

annotation SeasonTable DbTable {
  "uniquenessConstraints": [["name"]],
  "label": ["name"],
  "id_prefix": "S-"
};

/// Each series is a collection of races
struct Series {
  SeasonId season_id;
  StringNE name;
  StringNE abbreviation;
  Bool is_handicap;
  Nullable<HandicapSystem> handicap_system;
  Word8 num_drops;
};

union HandicapSystem {
  Void v1;
  Void v2;
};

newtype SeriesTable = WithId<Series>;
type SeriesId = DbKey<SeriesTable>;

annotation SeriesTable DbTable {
  "uniquenessConstraints": [["seasonId", "name"],["seasonId", "abbreviation"]],
  "label": ["abbreviation"],
  "id_prefix": "S-"
};

/// A Race 
struct Race {
  LocalDate scheduled_date;
  Word8 race_number;
  String duty_officer = "";
};

newtype RaceTable = WithId<Race>;
type RaceId = DbKey<RaceTable>;

annotation RaceTable DbTable {
  "withIdPrimaryKey" : true,
  "label": ["scheduledDate","raceNumber"],
  "id_prefix": "R-"
};

/// A Calendar entry, shown in the schedule
/// but otherwise has no effect
struct CalendarEntry {
  SeasonId season_id;
  LocalDate date;
  StringNE description;
};

newtype CalendarEntryTable = WithId<CalendarEntry>;
type CalendarEntryId = DbKey<CalendarEntryTable>;

annotation CalendarEntryTable DbTable {
  "label": ["description"],
  "id_prefix": "CE-"
};

// Details for a race, know once it's been run
struct RaceStart {
  RaceId race_id;
  LocalDate date;
  Bool abandoned;
  LocalTime start_time;
  StringML conditions;
  StringML notes;
};

newtype RaceStartTable = WithId<RaceStart>;
type RaceStartId = DbKey<RaceStartTable>;

annotation RaceStartTable DbTable {
  "uniquenessConstraints": [["raceId"]],
  "id_prefix": "RS-"
};

/// A race in a series
struct Event {
  StringNE abbreviation;
  SeriesId series_id;
  RaceId race_id;
  RaceType race_type;
};

newtype EventTable = WithId<Event>;
type EventId = DbKey<EventTable>;

annotation EventTable DbTable {
  "uniquenessConstraints": [["seriesId", "raceId"]],
  "label": ["abbreviation"],
  "id_prefix": "E-"
};

union RaceType {
  Void scratch;
  Void pursuit;
};

/// Personal and boat details for an entrant
struct Entrant {
  SeasonId season_id;
  StringNE entrant_name;
  StringNE boat_name;
  StringNE sail_number;
  Double yardstick;
  Double initial_handicap;
};

newtype EntrantTable = WithId<Entrant>;
type EntrantId = DbKey<EntrantTable>;

annotation EntrantTable DbTable {
  "uniquenessConstraints": [["entrantName"]],
  "label": ["entrantName"],
  "id_prefix": "E-"
};

/// An entrants results in a single race
struct RaceResult {
  RaceId race_id;
  EntrantId entrant_id;
  RResult<LocalTime> result;
};

newtype RaceResultTable = WithId<RaceResult>;
type RaceResultId = DbKey<RaceResultTable>;

annotation RaceResultTable DbTable {
  "uniquenessConstraints": [["raceId","entrantId"]],
  "id_prefix": "RR-"
};

/// An entrants result in a single event
struct EventResult {
  EntrantId entrant_id;
  EventId event_id;
  StringNE entrant_name;
  StringNE boat_name;
  StringNE sail_number;
  Double yardstick;
  Double handicap;
  Double handicap_secs;
  RResult<LocalTime> finish_time;
  RResult<Duration> elapsed_time;
  RResult<Duration> elapsed_time_yardstick;
  RResult<Duration> elapsed_time_handicap;
  Word16 score;
  Double handicap_change;
  Double handicap_new;
};

newtype EventResultTable = WithId<EventResult>;
type EventResultId = DbKey<EventResultTable>;

annotation EventResultTable DbTable {
  "uniquenessConstraints": [["eventId","entrantId"]],
  "id_prefix": "ER-"
};

/// Overide a handicap before a specifed race
struct HandicapOverride {
  RaceId race_id;
  EntrantId entrant_id;
  Double handicap_new;
};

newtype HandicapOverrideTable = WithId<HandicapOverride>;
type HandicapOverrideId = DbKey<HandicapOverrideTable>;

annotation HandicapOverrideTable DbTable {
  "uniquenessConstraints": [["raceId","entrantId"]],
  "id_prefix": "HO-"
};

union RResult<T> {
  T finished;
  Void dnc;
  Void dns;
  Void dnf;
  Void dsq;
  Void avg;
};

/// Time duration in seconds
type Duration = Double;

};
